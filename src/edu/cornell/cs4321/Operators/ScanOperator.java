package edu.cornell.cs4321.Operators;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import edu.cornell.cs4321.Database.*;
import net.sf.jsqlparser.schema.Column;
import net.sf.jsqlparser.schema.Table;

/**
 * ScanOperator that reads files line by line, each line is packaged to a tuple.
 * Each from item or join item has one Scan Operator.
 * @author Chenxi Su cs2238, Hao Qian hq43, Jiangjie Man jm2559
 *
 */
public class ScanOperator extends Operator{
	private String fileDirectoryOfInputTable; 
	private List<Column> schemaList;// the schema of the specific table handled by this scanner
	private FileReader fr;
	BufferedReader br;
	
	/**
	 * Construct a scan operator by table.
	 * @param tableName refers to the table we want to read.
	 */
	public ScanOperator(String tableName){
		
		fileDirectoryOfInputTable = DatabaseCatalog.getPathByTableName(tableName);
		//System.out.println(fileDirectoryOfInputTable);
		schemaList = DatabaseCatalog.getSchemaByTable(tableName);
		
		//Initialize file reader 
		try {
			 fr = new FileReader(fileDirectoryOfInputTable);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("Table not found! Please check your input");
			fr = null;
		}
		
		//Initialize and buffered reader
		if(fr != null){
			br = new BufferedReader(fr);
		}
	}

	/**
	 * Construct scan operator by both table and alias 
	 * @param tableName Original table name
	 * @param alias the alias in a query statement of the table
	 */
	public ScanOperator(String tableName, String alias){
		
		fileDirectoryOfInputTable = DatabaseCatalog.getPathByTableName(tableName);
		//System.out.println(fileDirectoryOfInputTable);
		List<Column> newSchemaList = new ArrayList<Column>();
		schemaList = DatabaseCatalog.getSchemaByTable(tableName);
		for(Column c : schemaList){
			Table t = new Table();
			t.setName(alias);
			Column newColumn = new Column();
			newColumn.setTable(t);
			newColumn.setColumnName(c.getColumnName());
			newSchemaList.add(newColumn);
		}
		this.schemaList = newSchemaList;
		
		//Initialize file reader 
		try {
			 fr = new FileReader(fileDirectoryOfInputTable);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("Table not found! Please check your input");
			fr = null;
		}
		
		//Initialize and buffered reader
		if(fr != null){
			br = new BufferedReader(fr);
		}
	}
	
	/**
	 * re-create a file reader to read a table from the beginning.
	 */
	@Override
	public void reset() {
		try {
			 fr = new FileReader(fileDirectoryOfInputTable);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("Table not found! Please check your input");
			fr = null;
		}
		br = new BufferedReader(fr);
	}
	
	
	/**
	 * Retrieve next tuple from a file.
	 * If the operator is constructed with alias, then the tuple references to table by alias
	 * @return the next tuple generated by readLine
	 * */
	@Override
	public Tuple getNextTuple() {
		// TODO Auto-generated method stub
		try {
			String record = br.readLine();
			if(record == null) {
				return null;
			}
			//System.out.println("!!!"+record);
			return new Tuple(schemaList, record);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
	}
	
	
	
}
